#!/bin/sh
# License: BSD
# Author: Kris Moore
# 
# Dispatch script, run as root, allows www process to run 
# specific commands with priv
#
# Also runs as a daemon to process the said commands that appcafe
# wants to have run

# queue commands
# <app> <origin> <flag> <target>
# app = pbi / pkg
# origin = www/firefox or other PBI/PKG origin
# flag = install/delete/info
# target = __system__ / <jailname>

PATH="$PATH:/usr/local/bin:/usr/local/sbin"
export PATH

# QUEUE File
QTMPDIR="/var/tmp/appcafe"
QLOGDIR="${QTMPDIR}/logs"
QLIST="${QTMPDIR}/dispatch-queue"
QDISID="${QTMPDIR}/dispatch-id"
QWRK="${QLIST}.working"
QLOG="${QLIST}.log"
QRESULTS="${QLIST}.results"

init_daemon()
{
  # Appweb tmp dir
  if [ ! -d "$QTMPDIR" ] ; then
     mkdir ${QTMPDIR}
  fi
  if [ ! -d "$QLOGDIR" ] ; then
     mkdir ${QLOGDIR}
  fi

  chmod 600 ${QTMPDIR}
  chmod 600 ${QLOGDIR}

  rm /var/tmp/appcafe/* 2>/dev/null >/dev/null
  rm /var/tmp/appcafe/logs/* 2>/dev/null >/dev/null

  # Cleanup old daemon runtime
  for i in $QWRK $QRESULTS
  do
    if [ ! -e "$i" ] ; then
      touch $i
      chmod 600 $i
    fi
  done

  # Create the random string we will pass to authenticated clients
  # This changes after a login, and used to invalidate a previous login
  touch ${QDISID}
  chmod 600 ${QDISID}
  dd if=/dev/urandom count=1024 bs=1k | env LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 128 | head -n 1 > ${QDISID}

}

run_queue_cmd()
{
  # Breakdown the line into individual flags
  app=`echo $1 | cut -d " " -f 1`
  origin=`echo $1 | cut -d " " -f 2`
  flag=`echo $1 | cut -d " " -f 3`
  target=`echo $1 | cut -d " " -f 4`

  # Get the uniq identifier for this cmd
  local ident="`echo $1 | sha256 -q`"


  # Sanity check some of the given options
  case $app in
   pkg|pbi) case $flag in
            install|delete|info) ;;
                   *) echo "Unauthorized command specified: $1" >> ${QLOG}
                      echo "FAILED $ident $@" >> $QRESULTS
                      return 1
                      ;;
            esac
            ;;
 pkgupdate) target="$origin" ;;
    warden) case $origin in
	       create|delete) ;;
		   *) echo "Unauthorized warden command specified: $1" >> ${QLOG}
                      echo "FAILED $ident $@" >> $QRESULTS
                      return 1 ;;
	    esac
	    flag="install" ;;
         *) echo "Unauthorized command specified: $1" >> ${QLOG}
            echo "FAILED $ident $@" >> $QRESULTS
            return 1
            ;;
  esac

  
  # Now build the command
  if [ "$app" == "pbi" ];then
     cmd="pbi"
     if [ "$flag" = "app" ] ; then flag="$flag --licagree"; fi
     if [ "$target" != "__system__" ] ; then
       cmd="$cmd $flag -j $target $origin"
     else
       cmd="$cmd $flag $origin"
     fi
  elif [ "$app" == "pkg" ];then
     cmd="pkg"
     if [ "$target" != "__system__" ] ; then
       cmd="$cmd -j $target"
     fi
     cmd="$cmd $flag -y $origin"
  elif [ "$app" == "pkgupdate" ];then
     cmd="pc-updatemanager pkgupdate"
     if [ "$target" != "__system__" ] ; then
       cmd="warden pkgupdate $target"
     fi
  elif [ "$app" == "warden" ];then
     cmd="$1"
  fi

  # Remove any old ident lines from results
  sed -i '' "/ $ident /d" ${QRESULTS}

  # Lets run the command now
  echo "Running: $cmd" >$QLOG 2>$QLOG
  $cmd >>$QLOG 2>>$QLOG
  err=$?
  if [ $err -ne 0 ] ; then
     echo "FAILED $ident $@" >> $QRESULTS
  else
     echo "SUCCESS $ident $@" >> $QRESULTS
  fi

  # Inform syscache of the updates to check
  syscache "startsync" >/dev/null 2>/dev/null

  # Save the log file for later diagnostics
  mv ${QLOG} ${QLOGDIR}/${ident}.log
  chmod 644 ${QLOGDIR}/${ident}.log

  return $err
}

run_daemon()
{
  pid="/var/run/appcafe-dispatcher.pid"

  # Check if we have another copy of the daemon running
  if [ -e "${pid}" ] ; then
     pgrep -F ${pid} >/dev/null 2>/dev/null
     if [ $? -eq 0 ] ; then return 0; fi
  fi
  echo "$$" > ${pid}

  # Setup the daemon files
  init_daemon

  # Run the main loop
  while :
  do
    # Check if we have anything to do?
    if [ ! -e "$QLIST" ] ; then
       sleep 10
       continue
    fi

    # Move the queue over and run it
    mv $QLIST ${QLIST}.tmp
    while read line
    do
       echo "$line" > $QWRK
       run_queue_cmd "$line"
       echo "" > $QWRK
    done < ${QLIST}.tmp
    rm ${QLIST}.tmp

    # Done with pkg ops, lets inform syscache to refresh
    syscache "startsync" >/dev/null 2>/dev/null
  done

  rm $pid
}

list_status()
{
  if [ -e "$QLIST" ] ; then
     cat ${QLIST}
  fi
  if [ -e "$QLIST.tmp" ] ; then
     cat ${QLIST}.tmp
  fi
}

list_results()
{
  if [ -e "$QRESULTS" ] ; then
    cat ${QRESULTS} 
  else
    echo ""
  fi
}

display_log()
{
  if [ -e "${QLOGDIR}/${1}.log" ] ; then
    cat ${QLOGDIR}/${1}.log
  else
    echo ""
  fi
}

run_warden_cmd()
{
  case $2 in
      start) warden start $3;;
       stop) warden stop $3;;
       auto) warden auto $3;;
        set) warden set $3 $4 $5 $6;;
        get) warden get $3 $4 $5 $6 ; exit $? ;;
          *) echo "Non-dispatch-approved warden command: $2" ;;
  esac
  syscache "startsync" >/dev/null 2>/dev/null
}

run_service_cmd()
{

  local jid=""
  sname="$3"
  sscript="$4"
  if [ "$5" != "__system__" ] ; then
     jid="$5"
     jdir=`jls | grep " ${jid} " | awk '{print $4}'`
     rcfile="${jdir}/etc/rc.conf"
  else
     rcfile="/etc/rc.conf"
  fi

  case $2 in
       stop) # First, stop the service
	     if [ -n "$jid" ] ; then
	        jexec $jid service $sscript stop
             else
                service $sscript stop
	     fi 
	     # Now disable rc.conf entry
	     sed -i '' "/^${sname}_enable=\"YES\"/d" ${rcfile}
             ;;
      start) # First, enable the service
	     sed -i '' "/^${sname}_enable=\"NO\"/d" ${rcfile}
	     sed -i '' "/^${sname}_enable=\"YES\"/d" ${rcfile}
	     echo "${sname}_enable=\"YES\"" >> ${rcfile}

	     if [ -n "$jid" ] ; then
	        jexec $jid service $sscript start
             else
                service $sscript start
	     fi 
             ;;
    restart) # Restart the service 
	     if [ -n "$jid" ] ; then
	        jexec $jid service $sscript restart
             else
                service $sscript restart
             fi
             ;;
          *) echo "Non-dispatch-approved service command: $2" ;;
  esac
}

# Get value from config file
getcfg()
{
 cscript="$pbicdir/scripts/getconfig.sh"
 if [ ! -e "$cscript" ] ; then exit 1; fi

 if [ "$jail" != "__system__" ] ; then
    jid="$jail"
    jdir=`jls | grep " ${jid} " | awk '{print $4}'`
    rm ${jdir}/tmp/.appcafe-getcfg.sh.$$ >/dev/null 2>/dev/null
    cp $cscript ${jdir}/tmp/.appcafe-getcfg.sh.$$
    jexec $jid sh /tmp/.appcafe-getcfg.sh.$$ "$key"
    err=$?
    rm ${jdir}/tmp/.appcafe-getcfg.sh.$$
 else
   $cscript "$key"
   err=$?
 fi

 if [ $err -ne 0 ] ; then
   echo "Failed getting key: $key"
   exit 1
 fi
 exit 0
}

# Set value in config file
setcfg()
{
 cscript="$pbicdir/scripts/setconfig.sh"
 if [ ! -e "$cscript" ] ; then exit 1; fi
 if [ "$jail" != "__system__" ] ; then
    jid="$jail"
    jdir=`jls | grep " ${jid} " | awk '{print $4}'`
    rm ${jdir}/tmp/.appcafe-setcfg.sh.$$ >/dev/null 2>/dev/null
    cp $cscript ${jdir}/tmp/.appcafe-setcfg.sh.$$
    jexec $jid sh /tmp/.appcafe-setcfg.sh.$$ "$key" "$value"
    err=$?
    rm ${jdir}/tmp/.appcafe-setcfg.sh.$$
 else
   $cscript "$key" "$value"
   err=$?
 fi

 if [ $err -ne 0 ] ; then
   echo "Failed getting key: $key"
   exit 1
 fi
 exit 0
}

donecfg()
{
 cscript="$pbicdir/scripts/doneconfig.sh"
 if [ ! -e "$cscript" ] ; then exit 1; fi
 if [ "$jail" != "__system__" ] ; then
    jid="$jail"
    jdir=`jls | grep " ${jid} " | awk '{print $4}'`
    rm ${jdir}/tmp/.appcafe-donecfg.sh.$$ >/dev/null 2>/dev/null
    cp $cscript ${jdir}/tmp/.appcafe-donecfg.sh.$$
    jexec $jid sh /tmp/.appcafe-donecfg.sh.$$
    err=$?
    rm ${jdir}/tmp/.appcafe-donecfg.sh.$$
 else
   $cscript
   err=$?
 fi

 if [ $err -ne 0 ] ; then
   echo "Failed getting key: $key"
   exit 1
 fi
 exit 0
}

print_usage()
{
  echo "Dispatcher usage:
--------------------------------
   warden {start|stop} {jail}
   queue {pkg|pbi} {origin} {install/delete/info} {__system__|<jailname>}
   pkgupdate {__system__|<jailname>}
   service {start|stop|restart} {servicetag} {servicerc} {__system__|<jid>}
   getcfg {pbicdir} {__system__|<jid>} {key}
   setcfg {pbicdir} {__system__|<jid>} {key} {value}
   donecfg {pbicdir} {__system__|<jid>}
   daemon
   status
   results 
   log {hash}
" 
}

# Login is requesting the dispatcher ID for security
# Check the username / password and if OK pass the ID back
getdisid() {
  # Verify the username / password match what is passed
  php /usr/local/share/appcafe/dispatcher-auth >/dev/null 2>/dev/null
  if [ $? -ne 0 ] ; then exit 1; fi

  dd if=/dev/urandom count=1024 bs=1k | env LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1 > ${QDISID}
  chmod 600 ${QDISID}
  cat $QDISID >&1
  exit 0
}

bad_disid() {
  echo "Invalid dispatcher ID!"
  exit 1
}

verify_disid() {
  # Check if we have a valid Dispatcher ID set
  if [ -z "$PHP_DISID" ] ; then bad_disid; fi
  if [ "$PHP_DISID" != "`cat $QDISID`" ] ; then bad_disid; fi
  return 0
}

if [ "`/usr/bin/id -u`" != "0" ] ; then
   echo "Must be run as root!"
   exit 1
fi

if [ -n "$PHP_DISID" ] ; then
  echo "$PHP_DISID" > /tmp/disID
fi

case $1 in
    # Figure out which warden command we are using
    warden) verify_disid
	    case $2 in
              # These commands will be queued
              create|delete) echo "$@" >>${QLIST} ;;
	      # These commands can be run immediately
	      start|stop|auto|set|get) run_warden_cmd $@ ;;
	      *) echo "Invalid warden command! $2" ; exit 1 ;;
	    esac
	    ;;
    # Commands that interact with services
   service) verify_disid
	    run_service_cmd $@ ;;
    # These commands interact with the dispatcher daemon
     queue) verify_disid
            echo "$@" | cut -d ' ' -f 2- >>${QLIST} ;;
 pkgupdate) verify_disid
	    echo "pkgupdate $2" >>${QLIST} ;;
    daemon) run_daemon ;;
       log) display_log "$2" ;;
    status) list_status ;;
   results) list_results ;;
    getcfg) verify_disid
	    pbicdir="$2" ; jail="$3" ; key="$4"
            getcfg ;;
    setcfg) verify_disid
	    pbicdir="$2" ; jail="$3" ; key="$4" ; value="$5"
            setcfg ;;
   donecfg) verify_disid
	    pbicdir="$2" ; jail="$3"
            donecfg ;;
  getdisid) getdisid ;;
         *) print_usage ; exit 1 ;;
esac

exit 0
