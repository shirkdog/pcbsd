#!/bin/sh
#
# Copyright 2012 Kris Moore / iXsystems
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#        Name: pc-thinclient
# Description: Helper script to build / install the necessary bits to turn
#              a PC-BSD system into a thin-client server 
#
# Modified for external dhcp server support by Joe Maloney

# Source our functions
. /usr/local/share/pcbsd/scripts/functions.sh

# Set some universal variables
PROGDIR="/usr/local/share/pcbsd/pc-thinclient"
DHCPPORT="isc-dhcp41-server"
PXEWORLD="/usr/home/thinclient"
WORLDPORTS="x11/xorg graphics/xv"
export WORLDPORTS
SYSVER="`uname -r | cut -d '-' -f 1-2`"

# Start by sourcing /etc/profile
# This grabs any HTTP_ / FTP_ PROXY variables
. /etc/profile

# Start configuring the base system
check_configsystem() {
	echo "Setting up system for PXE booting..."

	# Setup the new pxeboot user with a default password
	cat /etc/passwd | grep pxeboot >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		echo "thinclient" | pw useradd -n "pxeboot" -h 0 -s /bin/tcsh -d ${PXEWORLD}/mnt/xorg-config -c "pxeboot"
		chown -R pxeboot:pxeboot ${PXEWORLD}/mnt/xorg-config
	fi

	# Copy over the default dhcpd.conf file
	cp ${PROGDIR}/resources/dhcpd/dhcpd.conf /usr/local/etc/dhcpd.conf

	# Ask for the NIC we want to run on
	while
	z=1
	do
		echo "What NIC do you wish DHCPD to listen on? (I.E. re0)"
		echo -e "nic) \c"
		read NIC 
		
		ifconfig $NIC >/dev/null 2>/dev/null
		if [ $? -ne 0 -o -z "$NIC" ] ; then
			echo "Invalid nic entered, please try again!"
			sleep 1
		else
			break
		fi
	done

	# Save the rc.conf glue
	cat /etc/rc.conf | grep "# pc-thinclient" >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		echo "# pc-thinclient configuration
dhcpd_enable=\"YES\"
dhcpd_ifaces=\"${NIC}\"
portmap_enable=\"YES\"
nfs_server_enable=\"YES\"
inetd_enable=\"YES\"
ifconfig_${NIC}=\"192.168.2.2\"" >> /etc/rc.conf
	fi

	# Add firewall exception
        if [ -e "/etc/pf.conf" ] ; then
	  cat /etc/pf.conf | grep "pass in on ${NIC} all" >/dev/null 2>/dev/null
	  if [ "$?" != "0" ] ; then
  		# Setup the firewall exclusion for this NIC
  		echo "pass in on ${NIC} all" >> /etc/pf.conf
		/etc/rc.d/pf restart
	  fi
     	fi

	# Add some entries for /etc/exports
	cat /etc/exports 2>/dev/null | grep "$PXEWORLD" >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
	  	echo "$PXEWORLD -maproot=nobody -ro -network 192.168.2 -mask 255.255.255" >>/etc/exports
	fi

	# Setup tftp
	cat /etc/inetd.conf | grep "$PXEWORLD" >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		echo "tftp   dgram   udp     wait    root    /usr/libexec/tftpd      tftpd -l -s ${PXEWORLD}" >> /etc/inetd.conf
	fi

	# Setup rcpbind entries
	cat /etc/hosts.allow 2>/dev/null | grep "192.168.2.0" >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		sed  -i '' 's|rpcbind : ALL : deny|rpcbind : 192.168.2.0/255.255.255.0 : allow\
portmap : 192.168.2.0/255.255.255.0 : allow\
rpcbind : ALL : deny|' /etc/hosts.allow
	fi

	# Add a bulk of IPs to /etc/hosts this fixes bugs with RPC timeouts
	# when mounting NFS
	grep -q 'thinclient100' /etc/hosts
	if [ $? -ne 0 ] ; then
		i="100"
		while
		z="1"
		do
			if [ "${i}" = "200" ]; then break; fi
			echo "192.168.2.${i}  thinclient${i}" >>/etc/hosts
			i="`expr ${i} + 1`"
		done
	fi

	# Make sure the NIC is set to the right IP before bringing up dhcpd
	ifconfig $NIC 192.168.2.2

	# Start the services
	cmds="/etc/rc.d/nfsd /etc/rc.d/inetd /usr/local/etc/rc.d/isc-dhcpd"
	for _sC in $cmds
	do
		echo -e "Starting ${_sC}...\c"
		${_sC} restart >/dev/null 2>/dev/null
		if [ "$?" != "0" ] ; then
			echo -e "FAILED! Please run try running it manually."
		else
			echo -e "OK"
		fi
	done
}

# Start configuring the base system without DHCP
check_configsystem_ignore_dhcp() {
	echo "Setting up system for PXE booting..."

	# Setup the new pxeboot user with a default password
	cat /etc/passwd | grep pxeboot >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		echo "thinclient" | pw useradd -n "pxeboot" -h 0 -s /bin/tcsh -d ${PXEWORLD}/mnt/xorg-config -c "pxeboot"
		chown -R pxeboot:pxeboot ${PXEWORLD}/mnt/xorg-config
	fi

	# Ask for the NIC we want to run on
	while
	z=1
	do
		echo "What NIC do you wish to listen on? (I.E. re0)"
		echo -e "nic) \c"
		read NIC 

		ifconfig $NIC >/dev/null 2>/dev/null
		if [ $? -ne 0 -o -z "$NIC" ] ; then
			echo "Invalid nic entered, please try again!"
			sleep 1
		else
			break
		fi
	done
	
	# Ask for the IP Address to be used on the NIC for PXE booting
	while
	z=1
	do
		echo "What IP address will pc-thinclient be listening on? (I.E. 192.168.2.2)"
		echo -e "ipaddr) \c"
		read ipaddr
	break
	done
		# Ask for the network id of the local subnet
	while
	z=1
	do
		echo "What is the network id for your local subnet? (I.E. 192.168.2.0)"
		echo -e "netid) \c"
		read netid 
	break
	done
	
	        # Ask for the network mask of the local subnet
        while
        z=1
        do
                echo "What is the network mask for your local subnet? (I.E. 255.255.255.0)"
                echo -e "netmaskid) \c"
                read netmaskid
        break
        done

	# Save the rc.conf glue
	cat /etc/rc.conf | grep "# pc-thinclient" >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		echo "# pc-thinclient configuration
portmap_enable=\"YES\"
nfs_server_enable=\"YES\"
inetd_enable=\"YES\"" >> /etc/rc.conf
	fi
	
	# Add firewall exception
        if [ -e "/etc/pf.conf" ] ; then
	  cat /etc/pf.conf | grep "pass in on ${NIC} all" >/dev/null 2>/dev/null
	  if [ "$?" != "0" ] ; then
  		# Setup the firewall exclusion for this NIC
  		echo "pass in on ${NIC} all" >> /etc/pf.conf
	  fi
     	fi

	# Add some entries for /etc/exports based on manual user input
	echo "$PXEWORLD -maproot=nobody -ro -network $netid -mask $netmaskid" >> /etc/exports

	# Setup tftp
	cat /etc/inetd.conf | grep "$PXEWORLD" >/dev/null 2>/dev/null
	if [ "$?" != "0" ] ; then
		echo "tftp   dgram   udp     wait    root    /usr/libexec/tftpd      tftpd -l -s ${PXEWORLD}" >> /etc/inetd.conf
	fi
	
	# Setup rcpbind entries
        sed -i -e "s|rpcbind : ALL : deny|rpcbind : $netid/$netmaskid : allow\\
portmap : $netid/$netmaskid : allow\\
rpcbind : ALL : deny|" /etc/hosts.allow

	# Start the services
	cmds="/etc/rc.d/nfsd /etc/rc.d/inetd"
	for _sC in $cmds
	do
		echo -e "Starting ${_sC}...\c"
		${_sC} restart >/dev/null 2>/dev/null
		if [ "$?" != "0" ] ; then
			echo -e "FAILED! Please run try running it manually."
		else
			echo -e "OK"
		fi
	done
}

# Check if the user wants to install packages for the webui
check_webui() {
  	echo "PC-ThinClient includes a web-interface for client management."
	echo "Would you like to install the Apache / PHP packages required?"
	echo -e "default: (y)\c";
	read ans
	if [ "$ans" = "n" -o "$ans" = "N" ] ; then return; fi 

	pkg install apache22 php5-hash php5-session
	if [ $? -ne 0 ] ; then
		echo "Package install failed!"
		echo "You may need to manually add apache, php5-hash and php5-session."
	fi

	# Make sure the config file exists
	if [ ! -e "${PROGDIR}/resources/webui/config.php" ] ; then
		cp ${PROGDIR}/resources/webui/config.php.dist ${PROGDIR}/resources/webui/config.php
	fi

	echo "All the webui files are located in: ${PROGDIR}/resources/webui"
	echo "You will need to configure your web-server to serve this directory."
	echo ""
	echo "Please edit the file ${PROGDIR}/resources/webui/config.php to set the"
	echo "user passwords / auth tokens for the site."
}

# Check if we need to install custom config
check_installconfig() {
	if [ -e "${PXEWORLD}/etc/scripts/tcslogin.sh" ] ; then return ; fi

	# Lets copy over the /etc/scripts directory
	rm -rf ${PXEWORLD}/etc/scripts >/dev/null 2>/dev/null
	cp -r ${PROGDIR}/resources/scripts ${PXEWORLD}/etc/scripts

	# Remove a few rc.d things we dont need on clients
	rm ${PXEWORLD}/etc/rc.d/cron
	rm ${PXEWORLD}/etc/rc.d/sendmail

	# Lets copy over all the /etc/ files we need
	cp ${PROGDIR}/resources/etc/fstab ${PXEWORLD}/etc/
	cp ${PROGDIR}/resources/etc/gettytab ${PXEWORLD}/etc/
	cp ${PROGDIR}/resources/etc/hosts ${PXEWORLD}/etc/
	cp ${PROGDIR}/resources/etc/motd ${PXEWORLD}/etc/
	cp ${PROGDIR}/resources/etc/rc.conf ${PXEWORLD}/etc/
	cp ${PROGDIR}/resources/etc/ttys ${PXEWORLD}/etc/

	# Copy over rc.d / boot / root files
	cp ${PROGDIR}/resources/boot/beastie.4th ${PXEWORLD}/boot/
	cp ${PROGDIR}/resources/root/dot.login ${PXEWORLD}/root/.login

	# Create a few directories used on client
	mkdir -p ${PXEWORLD}/mnt/xorg-config

	# Create the diskless configuration
	mkdir -p ${PXEWORLD}/conf/base
	mkdir -p ${PXEWORLD}/conf/base/etc
	mkdir -p ${PXEWORLD}/conf/base/var
	mkdir -p ${PXEWORLD}/conf/base/root
	echo "10m" > ${PXEWORLD}/conf/base/etc/md_size
	echo "20m" > ${PXEWORLD}/conf/base/var/md_size
	echo "30m" > ${PXEWORLD}/conf/base/root/md_size
	chroot ${PXEWORLD} tar cvf conf/base/etc.cpio.gz --format cpio --gzip etc 2>/dev/null
	chroot ${PXEWORLD} tar cvf conf/base/var.cpio.gz --exclude var/db/pkg --format cpio --gzip var 2>/dev/null
	chroot ${PXEWORLD} tar cvf conf/base/root.cpio.gz --format cpio --gzip root 2>/dev/null

        # Fix the ZFS zpool.cache
	rmdir ${PXEWORLD}/boot/zfs 2>/dev/null
	ln -fs /tmp ${PXEWORLD}/boot/zfs
}

# Check if we need to build the world environment
check_worldports() {
	mkdir ${PXEWORLD}/usr/local/etc 2>/dev/null
	cp /etc/resolv.conf ${PXEWORLD}/etc/
	cp /usr/local/etc/pkg.conf ${PXEWORLD}/usr/local/etc/
	cp -r /usr/local/etc/pkg ${PXEWORLD}/usr/local/etc/

	# Start by adding pcbsd-utils
	rc_halt "pkg -c ${PXEWORLD} install -y pcbsd-utils"
	
	# Remove old pc-sysinstall so we use new one in /usr/local/sbin
	rm ${PXEWORLD}/usr/sbin/pc-sysinstall 2>/dev/null

 	# If we are not doing a desktop we can stop here
	if [ "$SYSTYPE" != "desktop" ] ; then return; fi

	if [ -e "${PXEWORLD}/usr/local/bin/xv" ] ; then return ; fi

	# Install Xorg
	rc_halt "pkg -c ${PXEWORLD} install -y xorg"

	# Need to install / use GDM on the base system
	if [ ! -e "/usr/local/sbin/gdm" ] ; then
	  	rc_halt "pkg install -y gdm"
	fi

	# Disable PCDM since it doesn't do XDMCP
	grep -q '^pcdm_enable="NO"' /etc/rc.conf
	if [ $? -ne 0 ] ; then
       	 	echo 'pcdm_enable="NO"' >> /etc/rc.conf
	fi

	# Enable GDM for its XDMCP support
	grep -q '^gdm_enable="YES"' /etc/rc.conf
	if [ $? -ne 0 ] ; then
       	 	echo 'gdm_enable="YES"' >> /etc/rc.conf
	fi

	# Copy GDM pam & rc files
	cp ${PROGDIR}/resources/gdm/gdm-pam /usr/local/etc/pam.d/gdm
	cp ${PROGDIR}/resources/gdm/gdm-rc /usr/local/etc/rc.d/gdm
	cp ${PROGDIR}/resources/gdm/custom.conf /usr/local/etc/gdm/custom.conf
	
	# Re-extract the ports overlay data
	pc-extractoverlay ports
}

# Check if we need to build the world environment
check_world() {
  if [ -e "${PXEWORLD}/COPYRIGHT" ] ; then return ; fi
	
  mkdir -p "${PXEWORLD}"
  cd "${PXEWORLD}"

  # Default pcbsd.conf file
  PCBSD_ETCCONF="/usr/local/etc/pcbsd.conf"

  # Set the system arch type
  ARCH="`uname -m`"

  local dFiles="base.txz doc.txz kernel.txz"
  if [ "$ARCH" = "amd64" ] ; then
     dFiles="$dFiles lib32.txz"
  fi

  # To fetch the jail environment
  echo "Fetching FreeBSD environment. This may take a while..."
  for i in $dFiles
  do
    echo "Downloading ${SYSVER}/${ARCH}/dist/${i} ..."
    
    get_file_from_mirrors "/${SYSVER}/${ARCH}/dist/${i}" "$i" "iso"
    [ $? -ne 0 ] && exit_err "Error while downloading the freebsd world."
  done

  # Save the archive as our example world environment
  mkdir -p ${PXEWORLD}/installarchive/

  echo "Extracting FreeBSD environment... This may take a while..."
  # Extract dist files
  for i in $dFiles
  do
    tar xvpf ${i} 2>/dev/null
    if [ $? -ne 0 ] ; then exit_err "Failed extracting FreeBSD environment"; fi

    # Save the archive file
    mv ${i} ${PXEWORLD}/installarchive/
  done

}

# Function to check if dhcpd is installed
check_dhcpd() {
	which dhcpd >/dev/null 2>/dev/null
	if [ "$?" = "0" ] ; then return; fi

	echo "Installing $DHCPPORT"
        rc_halt "pkg install -y ${DHCPPORT}"
}

# Function to display what information to add to external DHCP server
ignore_dhcpd() {
	echo "Add the following information to your external DHCP Server"
        echo "Will display here when this works"
}

# Function which checks and sets up the thinclient as an install server
check_installdirs() {
	if [ -e "${PXEWORLD}/installscripts/pc-sysinstall.example" ]; then
	   return
	fi
	touch ${PXEWORLD}/etc/installserver
	mkdir ${PXEWORLD}/installscripts
	cp ${PROGDIR}/resources/scripts/pc-sysinstall.example ${PXEWORLD}/installscripts/pc-sysinstall.example
	chown -R www:www ${PXEWORLD}/installscripts

	echo "zfs_load=\"YES\"" > ${PXEWORLD}/boot/loader.conf
	echo "geom_mirror_load=\"YES\"" >> ${PXEWORLD}/boot/loader.conf
	echo "geom_eli_load=\"YES\"" >> ${PXEWORLD}/boot/loader.conf
}

do_removal() {
	if [ -d "${PXEWORLD}" ] ; then
		echo "Removing ${PXEWORLD}"
		rm -rf ${PXEWORLD} 2>/dev/null
		chflags -R noschg ${PXEWORLD} 2>/dev/null
		rm -rf ${PXEWORLD} 2>/dev/null
	fi
}

# Make sure we are root
if [ `id -u` != "0" ] ; then exit_err "Must be run as root!"; fi

# Check if we are removing the existing thinclient
if [ "$1" = "-remove" -o "$1" = "remove" ] ;  then
  do_removal
  exit 0
fi

echo "$0 will install the components to convert this system into a thin-client server."
echo -e "Continue? (Y/N) \c"
read tmp
if [ "$tmp" != "Y" -a "$tmp" != "y" ] ; then
	exit 0
fi

echo "Do you wish to install the dhcpd server port or use an external server?"
echo "If you wish to use an external server please make sure it supports adding" 
echo "next server and bootfile name options."
echo -e "(d/e) \c"
read tmp
if [ "$tmp" = "D" -o "$tmp" = "d" ] ; then
   DHCPTYPE="internal"
else
   DHCPTYPE="external"
fi

echo "Do you wish to make this a remote X desktop server or install server?"
echo -e "(r/i) \c"
read tmp
if [ "$tmp" = "I" -o "$tmp" = "i" ] ; then
   SYSTYPE="install"
else
   SYSTYPE="desktop"
fi


if [ "$DHCPTYPE" = "internal" ] ; then
  # Start by installing dhcpd
  check_dhcpd
else
  # Install without dhcpd
  ignore_dhcpd
fi

# Start by setting up a new buildworld
check_world

# Build the ports inside the world environment
check_worldports

if [ "$SYSTYPE" != "desktop" ] ; then
  # Setup the installation directories
  check_installdirs

  # Ask if they want to use the WebUI
  check_webui
fi

# Install the thinclient configuration files
check_installconfig

if [ "$DHCPTYPE" = "internal" ] ; then
  # Tweak the base system to enable the thinclient
  check_configsystem
else
  # Tweak the base system to enable the thinclient without dhcpd
  check_configsystem_ignore_dhcp
fi

if [ "$SYSTYPE" = "desktop" ] ; then
  echo ""
  echo "You will need to reboot the system for the login manager changes"
  echo "to take effect."
else
  echo ""
  echo "To perform system installations, place your custom pc-sysinstall scripts in:"
  echo "/usr/home/thinclient/installscripts"
  echo ""
  echo "An example script is provided in the above directory"
  echo ""
  echo "For unattended installations, save your pc-sysinstall script as:"
  echo "/usr/home/thinclient/installscripts/unattended.cfg"
fi

if [ "$DHCPTYPE" = "internal" ] ; then
  echo ""
  echo "Your system is now setup to do PXE booting!"
  exit 0
else
  echo "You will need to modify the following options in your dhcp server:"
  echo ""
  echo "filename boot/pxeboot"
  echo "next-server $ipaddr"
  echo "option root-path $PXEWORLD"
  echo ""
  echo "Then you can begin to use PXE Boot."
  exit 0
fi
