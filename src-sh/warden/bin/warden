#!/bin/sh
# Command-line interaction script for the warden
# Author: Kris Moore
# License: BSD
# "The Warden" Copyright 2013 PC-BSD Software (iXsystems)
######################################################################

# Source external functions
. /usr/local/share/pcbsd/scripts/functions.sh

require_root() 
{
  UTEST="`whoami`"
  if [ "$UTEST" != "root" ] ; then
     exit_err "This command must be run as root!"
  fi
}

# Source our functions
PROGDIR="/usr/local/share/warden"

# Source our variables
. ${PROGDIR}/scripts/backend/functions.sh

title()
{
  echo "Warden version ${WARDENVER}
---------------------------------"
};


# Function to display help information
help_main()
{
  title
  echo "Available commands

Type in help <command> for information and usage about that command

         help - This help file"

if [ -e "${PROGDIR}/bin/warden-gui" ] ; then
   echo "          gui - Launch the GUI menu"
fi

cat<<__EOF__
         auto - Toggles the autostart flag for a jail
      bspkgng - BootStrap pkgng and setup TrueOS repo
      checkup - Check for updates to a jail
       chroot - Launches chroot into a jail 
       create - Creates a new jail 
      details - Display usage details about a jail
       delete - Deletes a jail
       export - Exports a jail to a .wdn file
   fbsdupdate - Update the FreeBSD world inside jail
  fbsdupgrade - Upgrade the version of FreeBSD inside a jail
	fstab - Start users \$EDITOR on jails custom fstab
          get - Gets options list for a jail
       import - Imports a jail from a .wdn file
         list - Lists the installed jails
    pkgupdate - Update packages inside a jail
         pkgs - Lists the installed packages in a jail
         pbis - Lists the installed pbis in a jail
          set - Sets options for a jail
        unset - Unsets (clears) options for a jail
        start - Start a jail
         stop - Stops a jail
         type - Set the jail type (pluginjail|portjail|standard)
     template - Manage jail templates
         snap - Jail snapshot management
        clone - Clone an existing jail to a new jail
     cronsnap - Schedule snapshot creation via cron
__EOF__
};

help_get()
{
 title
 echo "Help get

Lets you get options for your jail

Available options:

             iface: Lets you see the network interface for this jail
              ipv4: Lets you see the IPv4 address for this jail
              ipv6: Lets you see the IPv6 address for this jail
        alias-ipv4: Lets you see additional IPv4 addresses for this jail
        alias-ipv6: Lets you see additional IPv6 addresses for this jail
       bridge-ipv4: Lets you see the vnet bridge IPv4 address for this jail
       bridge-ipv6: Lets you see the vnet bridge IPv6 address for this jail
 alias-bridge-ipv4: Lets you see additional vnet bridge IPv4 addresses for this jail
 alias-bridge-ipv6: Lets you see additional vnet bridge IPv6 addresses for this jail
defaultrouter-ipv4: Lets you see the default IPv4 router for this jail
defaultrouter-ipv6: Lets you see the default IPv6 router for this jail
     devfs-ruleset: Lets you see the devfs ruleset for this jail
	     flags: Lets you see additional flags to pass to the 'jail' command at startup

Usage:

  warden get ipv4 <Jail>

  warden get flags <Jail>

Example:

  warden get ipv4 myjail

  warden get flags myjail
"
};

help_set()
{
 title
 echo "Help set

Lets you set options for your jail

Available options:

             iface: Set the network interface for this jail
              ipv4: Set the IPv4 address for this jail
              ipv6: Set the IPv6 address for this jail
        alias-ipv4: Set additional IPv4 addresses for this jail
        alias-ipv6: Set additional IPv6 addresses for this jail
       bridge-ipv4: Set the vnet bridge IPv4 address for this jail
       bridge-ipv6: Set the vnet bridge IPv6 address for this jail
 alias-bridge-ipv4: Set additional vnet bridge IPv4 for this jail
 alias-bridge-ipv6: Set additional vnet bridge IPv6 for this jail
defaultrouter-ipv4: Set the default vnet IPv4 router for this jail
defaultrouter-ipv6: Set the default vnet IPv6 router for this jail
     devfs-ruleset: Set the devfs ruleset for this jail
             flags: Set additional flags to pass to the 'jail' command 
       vnet-enable: Enables vnet support for the jail
      vnet-disable: Disables vnet support for this jail

Usage:

  warden set ipv4 <Jail> <IP1>,<IP2>,<IP3>

  warden set flags <Jail> <Flag1>,<Flag2>,<Flag3>

Example:

  warden set ipv4 myjail 192.168.1.50,192.168.2.10

  warden set ipv6 myjail fe80::8e89:a5ff:fe52:ad19,fe80::8e89:a5ff:fe52:ad21

  warden set flags myjail allow.raw_sockets=true,allow.chflags=true

  warden set vnet-enable myjail
"
};

help_unset()
{
 title
 echo "Help unset

Lets you unset (clear) options for your jail

Available options:

             iface: Unset the network interface for this jail
              ipv4: Unset the IPv4 address for this jail
              ipv6: Unset the IPv6 address for this jail
        alias-ipv4: Unset additional IPv4 addresses for this jail
        alias-ipv6: Unset additional IPv6 addresses for this jail
       bridge-ipv4: Unset the vnet bridge IPv4 address for this jail
       bridge-ipv6: Unset the vnet bridge IPv6 address for this jail
 alias-bridge-ipv4: Unset additional vnet bridge IPv4 for this jail
 alias-bridge-ipv6: Unset additional vnet bridge IPv6 for this jail
defaultrouter-ipv4: Unset the default vnet IPv4 router for this jail
defaultrouter-ipv6: Unset the default vnet IPv6 router for this jail
     devfs-ruleset: Unset the devfs ruleset for this jail
             flags: Unset additional flags to pass to the 'jail' command 

Usage:

  warden unset ipv4 <Jail> <IP1>,<IP2>,<IP3>

  warden unset flags <Jail> <Flag1>,<Flag2>,<Flag3>

Example:

  warden unset ipv4 myjail

  warden unset ipv6 myjail

  warden unset flags myjail
"
};

help_checkup()
{
 title
 echo "Help checkup

Check for updates to a jail(s)

Usage:

  warden checkup <Jail>
   or
  warden checkup all

Example:

  warden checkup myjail
"
};

help_snap()
{
 title
 echo "Help snap

Perform Snapshot operations on a jail

Available Sub-Commands: list make remove removedate revert

list:

  warden snap list <jail>

make:

  warden snap make <jail> <Optional Comment>

remove:

  warden snap remove <jail> <snapshot>

removedate:

  warden snap removedate <jail> <date>

  NOTE: Removes all snapshots older than the given date.
        Valid dates are YYYY-MM-DD and YYYYMMDD

revert:

  warden snap revert <jail> <snapshot>

"
};

help_clone()
{
 title
 echo "Help clone

Clone an existing jail into a new jail with (optional) new IP address

Usage:

  warden clone <Jail> <NewJail>

Example:

  warden clone myjail newjail --ipv4=127.0.0.4/24
"
};

help_cronsnap()
{
 title
 echo "Help cronsnap

Schedule a jail snapshot

Usage:

  warden cronsnap <Jail> <action> <frequency> <daysToKeep>
  
  action = start / stop
  frequency = daily / hourly
  daysToKeep = Number of days to keep snapshots

Example:

  warden cronsnap myjail start daily 10

  or

  warden cronsnap myjail stop
"
};

help_details()
{
 title
 echo "Help details

View usage details about a jail

Usage:

  warden details <Jail>

Example:

  warden details myjail
"
};

help_template()
{
 title
 echo "Help template

Manage the jail templates used to create new FreeBSD jails

Required subcommands:

  create - Create a new jail template
  delete - Delete a jail template
    list - List jail templates on system

Flags:

  create:
     -fbsd <version>   - FreeBSD Version, 9.1-RELEASE, 9.0-RELEASE, etc
     -trueos <version> - TrueOS Version, 9.1-RELEASE, 9-STABLE, etc
     -arch <arch type> - System architecture, i386/amd64
     -tar <file>       - Use tar archive as template contents (Ignores -arch / -fbsd)
     -nick <nickname>  - Template nickname for creating jails / deleting templates

Usage:

  warden template create <flags>
   or
  warden template delete <template nickname>
   or
  warden template list

Example:

  warden template create -fbsd 9.1-RELEASE -arch amd64 -nick 91amd64
"
};


help_type()
{
 title
 echo "Help type

Lets you set the type of jail to these options:

portjail: Jail with access to your home directories and Xorg
pluginjail: Jail that can be used to install FreeNAS plugins
standard: Normal FreeBSD secure jail environment

The flag status can be checked with 'warden list'. 

Usage:

  warden type <Jail> <type>

Example:

  warden type myjail portjail
"
};


help_bspkgng()
{
 title
 echo "Help bspkgng

BootStraps the pkgng package system, and installs the TrueOS repository
and utilities into a jail.

Usage:

  warden bspkgng <Jail>

Example:

  warden bspkgng myjail
"
};



help_auto()
{
 title
 echo "Help auto

Toggles the autostart flag for a specified jail. If the flag is 
enabled, then the jail will be started at system bootup automatically.
The flag status can be checked with 'warden list'. 

Usage:

  warden auto <Jail>

Example:

  warden auto myjail
"
};

help_pkgs()
{
 title
 echo "Help pkgs

Generates a listing of the installed ports in a jail.

Usage:

  warden pkgs <Jail>

Example:

  warden pkgs myjail
"
};

help_pbis()
{
 title
 echo "Help pbis

Generates a listing of the installed pbi's in a jail.

Usage:

  warden pbis <Jail>

Example:

  warden pbis myjail
"
};

help_list()
{
 title
 echo "Help list

Generates a quick listing of the installed jails, including the running
status.

Available Flags:
  -v           (Verbose listing)

Usage:

  warden list [flags] [hosts]
"
};

help_export()
{
 title
 echo "Help export

Export will backup a full copy of your jail, compressing it and 
saving it to a .wdn file. This file can then be taken and 
imported on another system to migrate the jail to new hardware. 
Also a .wdn file may be imported on the same system, in order to 
'clone' an existing jail with a new IP address. 

Available Flags:
  --dir=<DIR>  (Specify the directory you want to place the finished .wdn file)

Usage:

  warden export <Jail> --dir=<path>

Example:

  warden export myjail --dir=/tmp
"
};

help_fstab()
{
 title
 echo "Help fstab

Runs the users \$EDITOR on the jails custom fstab file. Can be used to setup
nullfs mounts and others for a specific jail

Usage:

  warden fstab [hosts]
"
};

help_import()
{
 title
 echo "Help import

Imports a jail from a .wdn file. Can assign a new IP / Hostname to
the imported jail on the fly using optional flags.  

Available Flags:
  --ipv4=<IP/NETMASK> (Specify a new IPv4/NETMASK address to assign to this jail)
  --ipv6=<IP/NETMASK> (Specify a new IPv6/NETMASK address to assign to this jail)
  --host=<HOST>       (Specify a new host name to assign to this jail)

Usage:

  warden import <jailname> <.wdn file>

Example:

  warden import myjail /home/kris/myjail.wdn
"
};

help_fbsdupgrade()
{
 title
 echo "Help fbsdupgrade

Upgrades the version of FreeBSD inside the jail

Usage:

  warden fbsdupgrade <jail> <new version>

Example:

  warden fbsdupgrade myjail 10.2-RELEASE
"
};

help_fbsdupdate()
{
 title
 echo "Help fbsdupdate

Updates the freebsd world inside a jail

Available Flags:
  --pkgupdate (Also update the packages in the jail)

Usage:

  warden fbsdupdate <jail>

Example:

  warden fbsdupdate myjail
"
};

help_pkgupdate()
{
 title
 echo "Help pkgupdate

Updates all the packages inside a jail

Usage:

  warden pkgupdate <Jail>

Example:

  warden pkgupdate myjail

NOTE:

  The upgrade will stop the jail, and do the package upgrade in stopped mode.
  If the jail was previously running, it will be re-started upon completion. 
"
};

help_chroot()
{
 title
 echo "Help chroot

Logs into a jail using chroot, or runs the supplied command. 

Usage:

  warden chroot <Jail> <optional cmd>

Example:

  warden chroot myjail
"
};


help_start()
{
 title
 echo "Help start 

Starts a stopped jail

Usage:

  warden start <Jail>

Example:

  warden start myjail
"
};

help_stop()
{
 title
 echo "Help stop

Stops a running jail

Usage:
  warden stop <Jail>

Example:

  warden stop myjail
"
};


help_delete()
{
 title
 echo "Help delete

Stops and deletes a jail

Available Flags:
  --confirm       (Does not prompt to confirm deletion. DANGEROUS)

Usage:

  warden delete <Jail>

Example:

  warden delete myjail
"
};



help_create()
{
 title
 echo "Help create

Creates a new jail, with options for system source, ports and autostarting.

Available Flags:
  -32                          Create 32bit jail on 64bit system
  --autoipv4		       Use the next available IPv4 address from the pool
  --ipv4=<ip/mask>             Set primary IPv4 address for jail
  --ipv6=<ip/mask>             Set primary IPv6 address for jail
  --archive <tar>              Use specified tar file for BSD jail creation
  --bulk <number>              Create <number> of new jails, using default IP4 pool
                               or address pool specified with --ip4pool
  --ip4pool <address>	       Starting IPv4 address to use when creating jails in bulk
  --linuxjail <script>         Make this a linux jail and use supplied script for installation
  --linuxarchive <tar>         Use specified tar file for Linux jail creation
  --pluginjail                 Make this a pluginjail
  --ports                      Includes the ports tree
  --portjail                   Make this a portjail
  --src                        Includes /usr/src system source
  --startauto                  Start this jail at system boot
  --template <string>          Specify a jail template to build with
  --vanilla                    Don't install PC-BSD pkgng repo and utilities
  --version <string>           Use this instead of /etc/version

Usage:

  warden create <JAILNAME> <flags>

Example:

  warden create jailbird --ipv4=192.168.0.25/24 --src --ports --startauto
"
};

# Fix old style meta-data, can be removed after 9.1
fix_old_meta

# This checks if we have JDIR on a valid ZFS dataset
zfs_prog_check

# Check what the user wants to do
case "$1" in

   help) case "$2" in
             auto) help_auto ;;
          bspkgng) help_bspkgng ;;
           create) help_create ;;
           start) help_start ;;
           stop) help_stop ;;
           delete) help_delete ;;
           details) help_details ;;
           checkup) help_checkup ;;
           chroot) help_chroot ;;
           fbsdupdate) help_fbsdupdate ;;
           fbsdupgrade) help_fbsdupgrade ;;
           list) help_list ;;
           export) help_export ;;
           fstab) help_fstab ;;
           import) help_import ;;
           pbis) help_pbis ;;
           pkgs) help_pkgs ;;
           pkgupdate) help_pkgupdate ;;
           template) help_template ;;
           type) help_type ;;
           get) help_get ;;
           set) help_set ;;
           unset) help_unset ;;
           snap) help_snap ;;
           cronsnap) help_cronsnap ;;
           clone) help_clone ;;
           *) help_main ;;
         esac  ;;


    pkgs) JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         ${PROGDIR}/scripts/backend/listpkgs.sh "${JAILNAME}" 
         ;;
pkgupdate) JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         ${PROGDIR}/scripts/backend/pkgupdate.sh "${JAILNAME}" 
         ;;
fbsdupdate) JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         ${PROGDIR}/scripts/backend/fbsdupdate.sh "${JAILNAME}" "$3"
         ;;
fbsdupgrade) JAILNAME="${2}"
	 NEWFBSDVER="${3}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ -z "${NEWFBSDVER}" ]; then exit_err "No FreeBSD version specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         ${PROGDIR}/scripts/backend/fbsdupgrade.sh "$JAILNAME" "$NEWFBSDVER"
         ;;
details) JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         ${PROGDIR}/scripts/backend/details.sh "${JAILNAME}" 
         ;;
    pbis) JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         ${PROGDIR}/scripts/backend/listpbis.sh "${JAILNAME}" 
         ;;
    fstab) JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir
	 if [ ! -e "${JMETADIR}/fstab" ] ; then
	    echo "# Device	Mountpoint	FStype          Options Dump Pass" > ${JMETADIR}/fstab
	 fi
	 if [ -z "$EDITOR" ]; then EDITOR="vi"; fi
	 $EDITOR ${JMETADIR}/fstab
	 exit $?
         ;;
template) require_root
         OPT="$2"
         case $OPT in
	    create) shift ; shift; 
		    # Read our flags
		    while [ $# -gt 0 ]; do
   		    case $1 in
    			  -fbsd) shift
           			 if [ -z "$1" ] ; then exit_err "No FreeBSD version specified"; fi
           			 FBSDVER="${1}"
          		 	 ;;
  			-trueos) shift
           			 if [ -z "$1" ] ; then exit_err "No TrueOS version specified"; fi
           			 TRUEOSVER="${1}"
           			 ;;
    			  -arch) shift
           			 if [ -z "$1" ] ; then exit_err "No FreeBSD architecture specified"; fi
           		 	 FBSDARCH="${1}"
           			 ;;
    			   -tar) shift
           		         if [ -z "$1" ] ; then exit_err "No tar file specified"; fi
           			 if [ ! -e "$1" ] ; then exit_err "Could not find tar file: $1"; fi
           			 FBSDTAR="${1}"
           	 		 ;;
    			  -nick) shift
           		   	 if [ -z "$1" ] ; then exit_err "No nickname specified"; fi
           			 TNICK="`echo ${1} | sed 's| |_|g'`"
           			 ;;
  		    -pluginjail) shift
           			 TPLUGJAIL="YES"
           			 ;;
        		      *) exit_err "Invalid option: $1" ;;
   		    esac
   		    shift
		    done
		    export TPLUGJAIL TNICK FBSDTAR FBSDARCH TRUEOSVER FBSDVER
		    ${PROGDIR}/scripts/backend/createtemplate.sh ; exit $? ;;
	    delete) delete_template "$3" ;;
	      list) list_templates ;;
	         *) help_template ; exit 1 ;;
	 esac
         ;;
    get) require_root
	 OPT="${2}"
         JAILNAME="${3}"
         if [ -z "${JAILNAME}" ] ; then help_get; exit 1; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ] ; then exit_err "No such jail!"; fi
	 set_warden_metadir

	 case $OPT in
             flags) cat "${JMETADIR}/jail-flags" 2>/dev/null | sed 's| |,|g' ;;
             iface) cat "${JMETADIR}/iface"  2>/dev/null ;;
              ipv4) cat "${JMETADIR}/ipv4"  2>/dev/null | sed 's| |,|g' ;;
              ipv6) cat "${JMETADIR}/ipv6"  2>/dev/null | sed 's| |,|g' ;;
        alias-ipv4) cat "${JMETADIR}/alias-ipv4"  2>/dev/null | sed 's| |,|g' ;;
        alias-ipv6) cat "${JMETADIR}/alias-ipv6"  2>/dev/null | sed 's| |,|g' ;;
       bridge-ipv4) cat "${JMETADIR}/bridge-ipv4" 2>/dev/null | sed 's| |,|g' ;;
       bridge-ipv6) cat "${JMETADIR}/bridge-ipv6" 2>/dev/null | sed 's| |,|g' ;;
 alias-bridge-ipv4) cat "${JMETADIR}/alias-bridge-ipv4" 2>/dev/null | sed 's| |,|g' ;;
 alias-bridge-ipv6) cat "${JMETADIR}/alias-bridge-ipv6" 2>/dev/null | sed 's| |,|g' ;;
defaultrouter-ipv4) cat "${JMETADIR}/defaultrouter-ipv4" 2>/dev/null | sed 's| |,|g' ;;
defaultrouter-ipv6) cat "${JMETADIR}/defaultrouter-ipv6" 2>/dev/null | sed 's| |,|g' ;;
     devfs-ruleset) cat "${JMETADIR}/devfs-ruleset" 2>/dev/null ;;
              *) exit_err "Invalid option!" ;;
         esac
         ;;

    set) require_root
	 OPT="${2}" 
         JAILNAME="${3}"
         if [ -z "${JAILNAME}" ] ; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ] ; then exit_err "No such jail!"; fi
	 set_warden_metadir

	 case $OPT in
          iface) IFACE="${4}"
	         if [ -z "$IFACE" ] ; then
                    rm "${JMETADIR}/iface"
		    exit 0
                 fi
		 ifconfig $IFACE 2>/dev/null >/dev/null
		 if [ $? -ne 0 ] ; then
		    echo "WARNING: The interface ($IFACE) does not exist"
		 fi
	         echo $IFACE > "${JMETADIR}/iface"
		 ;;
             ipv4) IP4="${4}"
		 get_ip_and_netmask "${IP4}"
		 IP4="${JIP}"
  		 MASK4="${JMASK}"
  		 if [ -z "$MASK4" ] ; then MASK4="24"; fi
	         echo "$IP4/$MASK4" > "${JMETADIR}/ipv4"
                 ;;
             ipv6) IP6="${4}"
		 get_ip_and_netmask "${IP6}"
		 IP6="${JIP}"
  		 MASK6="${JMASK}"
  		 if [ -z "$MASK6" ] ; then MASK4="64"; fi
	         echo "$IP6/$MASK6" > "${JMETADIR}/ipv6"
                 ;;
       alias-ipv4) EXTRAIPS="${4}"
	         IPS=`echo $EXTRAIPS | sed 's|,| |g'`
	         rm "${JMETADIR}/alias-ipv4" >/dev/null 2>/dev/null
	         for _ip in $IPS
	         do
	            echo "$_ip" >> "${JMETADIR}/alias-ipv4"
	         done
                ;;
       alias-ipv6) EXTRAIPS="${4}"
	         IPS=`echo $EXTRAIPS | sed 's|,| |g'`
	         rm "${JMETADIR}/alias-ipv6" >/dev/null 2>/dev/null
	         for _ip in $IPS
	         do
	            echo "$_ip" >> "${JMETADIR}/alias-ipv6"
	         done
                ;;
       bridge-ipv4) BIP4="${4}"
	         echo "$BIP4" > "${JMETADIR}/bridge-ipv4"
                 ;;
       bridge-ipv6) BIP6="${4}"
	         echo "$BIP6" > "${JMETADIR}/bridge-ipv6"
                 ;;
 alias-bridge-ipv4) EXTRAIPS="${4}"
	         IPS=`echo $EXTRAIPS | sed 's|,| |g'`
	         rm "${JMETADIR}/alias-bridge-ipv4" >/dev/null 2>/dev/null
	         for _ip in $IPS
	         do
	            echo "$_ip" >> "${JMETADIR}/alias-bridge-ipv4"
	         done
                ;;
 alias-bridge-ipv6) EXTRAIPS="${4}"
	         IPS=`echo $EXTRAIPS | sed 's|,| |g'`
	         rm "${JMETADIR}/alias-bridge-ipv6" >/dev/null 2>/dev/null
	         for _ip in $IPS
	         do
	            echo "$_ip" >> "${JMETADIR}/alias-bridge-ipv6"
	         done
                ;;
defaultrouter-ipv4) DEFAULTROUTER="${4}"
	         echo "$DEFAULTROUTER" > "${JMETADIR}/defaultrouter-ipv4"
                 ;;
defaultrouter-ipv6) DEFAULTROUTER="${4}"
	         echo "$DEFAULTROUTER" > "${JMETADIR}/defaultrouter-ipv6"
                 ;;
     devfs-ruleset) DEVFS_RULESET="${4}"
           if [ -z "$DEVFS_RULESET" ] ; then
                    rm "${JMETADIR}/devfs-ruleset"
                    exit 0
           fi
           # check if the rule is valid
           SYS_DEVFS_RULESETS=`devfs rule showsets`
           RULE_VALID=0
           for RULESET in $SYS_DEVFS_RULESETS
           do
              if [ "$RULESET" -eq "$DEVFS_RULESET" ]; then
                 RULE_VALID=1
                 break
              fi
           done
           if [ "$RULE_VALID" -eq 0 ]; then
              echo "WARNING: The specified ruleset ($DEVFS_RULESET) does not exist"
           fi

           echo "$DEVFS_RULESET" > "${JMETADIR}/devfs-ruleset"
                 ;;                 
          flags) EXTRAFLAGS="${4}"
	         echo $EXTRAFLAGS | sed 's|,| |g' > "${JMETADIR}/jail-flags"
		 ;;
    vnet-enable) touch "${JMETADIR}/vnet" ;;
    vnet-disable) rm "${JMETADIR}/vnet" 2>/dev/null ;;
              *) exit_err "Invalid option!" ;;
	   esac
         ;;

    unset) require_root
   OPT="${2}" 
         JAILNAME="${3}"
         if [ -z "${JAILNAME}" ] ; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ] ; then exit_err "No such jail!"; fi
   set_warden_metadir

   case $OPT in
            iface) if [ -e "${JMETADIR}/iface" ]; then rm "${JMETADIR}/iface"; fi
                 ;;

             ipv4) if [ -e "${JMETADIR}/ipv4" ]; then rm "${JMETADIR}/ipv4"; fi
                 ;;

             ipv6) if [ -e "${JMETADIR}/ipv6" ]; then rm "${JMETADIR}/ipv6"; fi
                 ;;

       alias-ipv4) if [ -e "${JMETADIR}/alias-ipv4" ]; then rm "${JMETADIR}/alias-ipv4"; fi
                 ;;

       alias-ipv6) if [ -e "${JMETADIR}/alias-ipv6" ]; then rm "${JMETADIR}/alias-ipv6"; fi
                 ;;

       bridge-ipv4) if [ -e "${JMETADIR}/bridge-ipv4" ]; then rm "${JMETADIR}/bridge-ipv4"; fi
                 ;;

       bridge-ipv6) if [ -e "${JMETADIR}/bridge-ipv6" ]; then rm "${JMETADIR}/bridge-ipv6"; fi
                 ;;

 alias-bridge-ipv4) if [ -e "${JMETADIR}/alias-bridge-ipv4" ]; then rm "${JMETADIR}/alias-bridge-ipv4"; fi
                 ;;

 alias-bridge-ipv6) if [ -e "${JMETADIR}/alias-bridge-ipv6" ]; then rm "${JMETADIR}/alias-bridge-ipv6"; fi
                 ;;

defaultrouter-ipv4) if [ -e "${JMETADIR}/defaultrouter-ipv4" ]; then rm "${JMETADIR}/defaultrouter-ipv4"; fi
                 ;;

defaultrouter-ipv6) if [ -e "${JMETADIR}/defaultrouter-ipv6" ]; then rm "${JMETADIR}/defaultrouter-ipv6"; fi
                 ;;

     devfs-ruleset) if [ -e "${JMETADIR}/devfs-ruleset" ]; then rm "${JMETADIR}/devfs-ruleset"; fi
                 ;;

                 *) exit_err "Invalid option!" ;;
                 esac
                 ;;

   type) require_root
	 JAILNAME="${2}"
         TYPE="${3}"
         JAILDIR="${JDIR}/${JAILNAME}"

         if [ -z "${JAILNAME}" ] ; then exit_err "No jail specified!"; fi
         if [ ! -e "${JAILDIR}" ] ; then exit_err "No such jail!"; fi

	 set_warden_metadir
	 if [ -e "${JMETADIR}/jail-linux" ] ; then exit_err "Cannot change type on Linux jail!"; fi

	 case $TYPE in
	   portjail)
              rm ${JMETADIR}/jail-pluginjail > /dev/null 2>/dev/null
              mkportjail "${JAILDIR}"
              ;;
	   standard)
              rm ${JMETADIR}/jail-pluginjail > /dev/null 2>/dev/null
              rm ${JMETADIR}/jail-portjail >/dev/null 2>/dev/null
              ;;
	   pluginjail)
              mkpluginjail "${JAILDIR}"
              ;;
	   *) exit_err "Invalid TYPE" ;;
         esac
         ;;

 bspkgng) require_root
    JAILNAME="${2}"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
         bootstrap_pkgng "${JDIR}/${JAILNAME}"
         ;;

   auto) require_root
	 JAILNAME="${2}"

         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi

         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         if [ -e "${JMETADIR}/autostart" ]
         then
            rm "${JMETADIR}/autostart"
            echo "Disabled autostart for ${JAILNAME}"
         else
            touch "${JMETADIR}/autostart"
            echo "Enabled autostart for ${JAILNAME}"
         fi 

	 # Update flags so syscache knows to re-scan
	 pc-systemflag WARDENUPDATE SUCCESS
	
	 sleep 2

         ;;

    gui) require_root
	  ${PROGDIR}/bin/warden-gui ;;

    list) require_root
	shift
        ${PROGDIR}/scripts/backend/listjails.sh $* ;;
    
   start) require_root
	  # Time to startup the jail
          JAILNAME="${2}"

          if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
          if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi 
	  set_warden_metadir
         
          # Check if this jail is already running
          ${PROGDIR}/scripts/backend/checkstatus.sh "${JAILNAME}"
          if [ "$?" = "0" ]; then exit_err "This jail is already running!"; fi
 
          ${PROGDIR}/scripts/backend/startjail.sh "${JAILNAME}" 
          ;;
   stop)  require_root
          # Time to stop the jail
          JAILNAME="${2}"

          if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
          if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi 
	  set_warden_metadir
         
          ${PROGDIR}/scripts/backend/stopjail.sh "${JAILNAME}" 
          ;;

 checkup) # Log a user into chroot session
          JAILNAME="${2}"

          if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
          if [ ! -e "${JDIR}/${JAILNAME}" -a "${JAILNAME}" != "all" ]; then exit_err "No such jail!"; fi

          ${PROGDIR}/scripts/backend/checkupdates.sh "${JAILNAME}"
          ;;


 chroot) # Log a user into chroot session
          JAILNAME="${2}"

          if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
          if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	  set_warden_metadir

          ${PROGDIR}/scripts/backend/chrootjail.sh "${JAILNAME}" "${3}"
          ;;

 import) require_root
	 # The user wants to import a jail, lets do it!
         NAME="$2"
         IFILE="$3"
         if [ ! -e "$IFILE" -o -z "$IFILE" ]; then exit_err "Invalid filename: ${IFILE}"; fi

	 # Parse the IP / Host flags
         HOST="OFF"
	 IP4="OFF"
	 IP6="OFF"
	 get_ip_host_flags "$@"
         if [ "${IP4}" != "OFF" ] ; then
            IP4="${IP4}/${MASK4}"
         fi
         if [ "${IP6}" != "OFF" ] ; then
            IP6="${IP6}/${MASK6}"
         fi

         # Import the jail now!
         ${PROGDIR}/scripts/backend/importjail.sh "$NAME" "$IFILE" "$HOST" "$IP4" "$IP6"
        ;;

 export) require_root
         # The user wants to export a jail, lets do it!
         JAILNAME="$2"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         # Check if the user wants to place the file in their own DIR
         DIR=""
         for i in "$@"
         do
           echo ${i} | grep "\-\-dir=" >/dev/null 2>/dev/null
           if [ "$?" = "0" ]
           then
              DIR="`echo ${i} | cut -d '=' -f 2`"
              # Check if the directory exists
              if [ ! -d "${DIR}" ]; then exit_err "No such directory ${DIR}!"; fi
           fi

         done

         # Export the jail now
         ${PROGDIR}/scripts/backend/exportjail.sh "${JAILNAME}" "${DIR}"

         ;;

 snap) require_root
         JAILNAME="$3"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

         # Get the sub-command here
	 case $2 in
            list) ${PROGDIR}/scripts/backend/zfslistsnap.sh "${JAILNAME}" ;;
            make) ${PROGDIR}/scripts/backend/zfsmksnap.sh "${JAILNAME}" "$4" ;;
          remove) ${PROGDIR}/scripts/backend/zfsrmsnap.sh "${JAILNAME}" "$4" ;;
      removedate) ${PROGDIR}/scripts/backend/zfsrmsnapdate.sh "${JAILNAME}" "$4" ;;
          revert) ${PROGDIR}/scripts/backend/zfsrevertsnap.sh "${JAILNAME}" "$4" ;;
                *) help_snap ; exit 1 ;;
	 esac
         ;;

 clone) require_root
         JAILNAME="$2"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir

	 get_ip_host_flags "$@"

         if [ "${IP4}" != "OFF" ] ; then
            IP4="${IP4}/${MASK4}"
         fi
         if [ "${IP6}" != "OFF" ] ; then
            IP6="${IP6}/${MASK6}"
         fi

         ${PROGDIR}/scripts/backend/zfsclone.sh "${JAILNAME}" "$3" "$IP4" "$IP6"
         ;;

 cronsnap) require_root
         JAILNAME="$2"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	 set_warden_metadir
         ${PROGDIR}/scripts/backend/zfscronsnap.sh "${JAILNAME}" "$3" "$4" "$5"
         ;;


 create) require_root
         # The user wants to create a new jail, do error checking
         JAILNAME="$2"
         if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
         echo "$2" | grep -q '^-'
         if [ $? -eq 0 ] ; then
	    exit_err "Jailname must be specified first before -- flags!"
	 fi


	 # Parse the IP flags
	 IP4="OFF"
	 IP6="OFF"
	 get_ip_host_flags "$@"
         if [ "${IP4}" != "OFF" ] ; then
            IP4="${IP4}/${MASK4}"
         fi
         if [ "${IP6}" != "OFF" ] ; then
            IP6="${IP6}/${MASK6}"
         fi

	 # Set the hostname
         HOST="$2"
	 export HOST

         #Now check for the presence of the optional flags
         SRC="NO"
         SOURCE="NO"
         PORTS="NO"
         AUTOSTART="NO"
         VANILLA="NO"
         CREATEVERSION=""
         JAILTYPE="standard"
         ARCHIVE_FILE= 
         while [ $# -gt 0 ]; do
           case $1 in
             --src) SRC="YES" ; SOURCE="YES" ;;
             --ports) PORTS="YES" ;;
             --startauto) AUTOSTART="YES" ;;
             --autoipv4) AUTOIPV4="YES" ;;
             --vanilla) VANILLA="YES" ;;
             --portjail) JAILTYPE="portjail" ;;
             --pluginjail) JAILTYPE="pluginjail" ; VANILLA="YES" ;; 
             --linuxjail) JAILTYPE="linuxjail" ; shift
			  if [ -z "$1" ] ; then exit_err "No linux setup script specified!"; fi
			  LINUX_JAIL_SCRIPT="$1" ; export LINUX_JAIL_SCRIPT
			  if [ -n "$LINUXARCHIVE_FILE" ] ; then 
			     exit_err "--linuxjail and --linuxarchive are mutually exclusive!"
			  fi
			  ;;
	             -32) if [ "$REALARCH" != "amd64" ] ; then
                                exit_err "-32 can only be used on amd64 host"
                          fi
                          ARCH=i386
			  export ARCH
                          ;;
             --archive) shift
			  if [ -z "$1" ] ; then exit_err "No archive file specified!"; fi
			  ARCHIVE_FILE="$1" ; export ARCHIVE_FILE
			  if [ ! -e "$ARCHIVE_FILE" ] ; then
			     exit_err "No such file: $ARCHIVE_FILE"
			  fi
			  ;;
             --linuxarchive) JAILTYPE="linuxjail" ; shift
			  if [ -z "$1" ] ; then exit_err "No archive file specified!"; fi
			  LINUXARCHIVE_FILE="$1" ; export LINUXARCHIVE_FILE
			  if [ ! -e "$LINUXARCHIVE_FILE" ] ; then
			     exit_err "No such file: $LINUXARCHIVE_FILE"
			  fi
			  if [ -n "$LINUX_JAIL_SCRIPT" ] ; then 
			     exit_err "--linuxjail and --linuxarchive are mutually exclusive!"
			  fi
			  ;;
             --version) shift
			  if [ -z "$1" ] ; then exit_err "No version string specified!"; fi
                          CREATEVERSION="${1}"
                          ;;
             --bulk) shift
			  if [ -z "$1" ] ; then exit_err "No bulk number specified!"; fi
                          BULKCOUNT="${1}"
                          ;;
             --ip4pool) shift
			  if [ -z "$1" ] ; then exit_err "No IPv4 pool specified!"; fi
                          IP4POOL="${1}"
                          ;;
             --template) shift
			  if [ -z "$1" ] ; then exit_err "No template string specified!"; fi
			  isDirZFS "${JDIR}"
			  if [ $? -eq 0 ] ; then
  			     TDIR="${JDIR}/.warden-template-$1"
		  	  else
  			     TDIR="${JDIR}/.warden-template-$1.tbz"
			  fi
			  if [ ! -e "$TDIR" ] ; then
			     exit_err "Invalid template specified: $1"
			  fi
                          TEMPLATE="${1}"
                          ;;
           esac
           shift
         done

         #
         # Redonkulous number of parameters that exceeds 9,
         # export into environment
         #
	 export SRC SOURCE PORTS AUTOSTART JAILTYPE ARCHIVE_FILE CREATEVERSION VANILLA TEMPLATE

	 # Are we doing bulk creation?
	 if [ -n "$BULKCOUNT" ] ; then
	   if [ ! $(is_num "$BULKCOUNT") ] ; then exit_err "Invalid bulk number"; fi

	   # Set the IP pool to use
	   if [ -z "$IP4POOL" ] ; then IP4POOL="$DEFAULT_IP4POOL"; fi
	   if [ -z "$IP4POOL" ] ; then
	      exit_err "No IPv4 pool specified! Use --ipv4pool or setup IP4POOL: in warden.conf"
	   fi
	   curNum="`echo $IP4POOL | cut -d '.' -f 4`"
	   baseIP="`echo $IP4POOL | cut -d '.' -f 1-3`"
	   if [ ! $(is_num "$curNum") ] ; then exit_err "Invalid IPv4 pool number"; fi

	   num=0
	   while :
	   do
	     # Is this host / jail directory available?
	     if [ -e "${JDIR}/${JAILNAME}${curNum}" ] ; then
	        curNum=`expr $curNum + 1`
		continue
	     fi

	     # Now check if this IP address is available
	     ipConflict=0
             for i in `ls -d ${JDIR}/.*.meta 2>/dev/null`
             do
                if [ ! -e "${i}/ipv4" ] ; then continue ; fi
		if [ "`cat ${i}/ipv4`" = "${baseIP}.${curNum}/24" ] ; then
		   ipConflict=1 ; break
		fi
             done
	     if [ $ipConflict -eq 1 ] ; then
	        curNum=`expr $curNum + 1`
		continue
	     fi

	     IP="${baseIP}.${curNum}/24" ; export IP

             # Passed all tests, create the jail now
	     echo "Creating BULK jail: ${JAILNAME}${curNum} - ${IP}"
             ${PROGDIR}/scripts/backend/createjail.sh "${JAILNAME}${curNum}"
	     if [ $? -ne 0 ] ; then
		exit 1
	     fi
	     echo ""

             num=`expr $num + 1`
             if [ $num -ge $BULKCOUNT ] ; then break ; fi
	   done

	 else

           # Check to ensure this jail does not already exist
           if [ -e "${JDIR}/${JAILNAME}" ]; then exit_err "A jail with this name already exists!"; fi

	   if [ -n "$AUTOIPV4" ] ; then
	     # Get the pool addresses loaded
	     if [ -z "$IP4POOL" ] ; then IP4POOL="$DEFAULT_IP4POOL"; fi
	     curNum="`echo $IP4POOL | cut -d '.' -f 4`"
	     baseIP="`echo $IP4POOL | cut -d '.' -f 1-3`"
	     if [ ! $(is_num "$curNum") ] ; then exit_err "Invalid IPv4 pool number"; fi

	     # Get the next available IPv4 Address in this pool
	     while :
	     do
	       ipConflict=0
               for i in `ls -d ${JDIR}/.*.meta 2>/dev/null`
               do
                if [ ! -e "${i}/ipv4" ] ; then continue ; fi
		if [ "`cat ${i}/ipv4`" = "${baseIP}.${curNum}/24" ] ; then
		   ipConflict=1 ; break
		fi
               done
	       if [ $ipConflict -eq 0 ] ; then break; fi
	       curNum=`expr $curNum + 1`
             done

	     # Set the next IP address
	     IP4="${baseIP}.${curNum}/24"
	   fi

           export IP4 IP6

           # Passed all tests, create the jail now
           ${PROGDIR}/scripts/backend/createjail.sh "${JAILNAME}"
	   exit $?
	 fi

        ;;
  delete|destroy) require_root
          # Time to delete a jail
          JAILNAME="${2}"

          if [ -z "${JAILNAME}" ]; then exit_err "No jail specified!"; fi
          if [ ! -e "${JDIR}/${JAILNAME}" ]; then exit_err "No such jail!"; fi
	  set_warden_metadir

          if [ "$3" != "--confirm" ]
          then
            echo "Are you sure you want to delete ${JAILNAME}?"
            echo -e "Choice: (y/n)\c"
            read confirm
            if [ "$confirm" != "y" ]; then exit_err "Canceled!"; fi
          fi

          # Check if this jail is running
          ${PROGDIR}/scripts/backend/checkstatus.sh "${JAILNAME}"
          if [ "$?" = "0" ] ; then
            ${PROGDIR}/scripts/backend/stopjail.sh "${JAILNAME}"
          fi

          # Check if this jail is STILL running
          ${PROGDIR}/scripts/backend/checkstatus.sh "${JAILNAME}"
          if [ "$?" = "0" ] ; then exit_err "Jail still is running or has leftovers.."; fi

          # Delete it now
          ${PROGDIR}/scripts/backend/deletejail.sh "${JAILNAME}"
        ;;
   *) help_main ;;
esac


exit 0
